name: Generate Rule Sets

on:
  # Запуск по расписанию каждый день в 00:00 UTC
  schedule:
    - cron: '0 0 * * *'

  # Ручной запуск
  workflow_dispatch:

  # Запуск при пуше в main (опционально)
  # push:
  #   branches:
  #     - main

jobs:
  generate:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.3.0

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: '1.23'
          cache-dependency-path: src/go.sum

      - name: Build geodat2srs
        run: |
          cd src
          go build -o ../geodat2srs
          chmod +x ../geodat2srs

      - name: Make scripts executable
        run: chmod +x scripts/generate_rules.sh

      - name: Generate rule sets
        run: ./scripts/generate_rules.sh

      - name: Verify generated files
        run: |
          echo "Generated .srs files:"
          ls -1 *.srs | tee generated_files.txt
          echo ""
          echo "Total files: $(ls -1 *.srs | wc -l)"

      - name: Get next release number
        id: release_info
        run: |
          # Получаем дату в формате DD.MM.YYYY
          CURRENT_DATE=$(date +"%d.%m.%Y")
          echo "date=$CURRENT_DATE" >> $GITHUB_OUTPUT

          # Получаем последний релиз с тегом test
          LAST_RELEASE=$(gh release view test --json name -q .name 2>/dev/null || echo "Update 0 [01.01.2000]")
          echo "Last release: $LAST_RELEASE"

          # Извлекаем номер из названия релиза (например, "Update 21 [21.10.2025]" -> 21)
          LAST_NUMBER=$(echo "$LAST_RELEASE" | grep -oP 'Update \K\d+' || echo "0")
          echo "Last number: $LAST_NUMBER"

          # Увеличиваем номер
          NEXT_NUMBER=$((LAST_NUMBER + 1))
          echo "number=$NEXT_NUMBER" >> $GITHUB_OUTPUT

          # Формируем название релиза
          RELEASE_NAME="Update $NEXT_NUMBER [$CURRENT_DATE]"
          echo "name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "Next release: $RELEASE_NAME"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Delete existing test release
        continue-on-error: true
        run: |
          gh release delete test --yes
          git push origin :refs/tags/test
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create GitHub Release
        run: |
          # Собираем все .srs файлы
          FILES_TO_UPLOAD=$(ls -1 *.srs | tr '\n' ' ')

          echo "Uploading files to release:"
          echo "$FILES_TO_UPLOAD"

          # Создаем релиз и загружаем файлы
          gh release create test \
            --title "${{ steps.release_info.outputs.name }}" \
            --notes "Automated rule sets update for ${{ steps.release_info.outputs.date }}" \
            $FILES_TO_UPLOAD
        env:
          GH_TOKEN: ${{ github.token }}
